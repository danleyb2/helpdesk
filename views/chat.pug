extends application

block main
    style(type='text/css').
        .flex-fill{
            flex-grow:1;
            width: auto;
            height: auto;
            display: flex;
            flex-direction: column;
        }

        @import 'https://fonts.googleapis.com/css?family=Noto+Sans';
        * {
            box-sizing: border-box;
        }

        body {
            /*background: skyblue;*/
            font: 12px/16px "Noto Sans", sans-serif;
        }

        .floating-chat {
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            
            transform: translateY(70px);
            transition: all 250ms ease-out;
            border-radius: 50%;
            opacity: 0;
            background: -moz-linear-gradient(-45deg, #183850 0, #183850 25%, #192C46 50%, #22254C 75%, #22254C 100%);
            background: -webkit-linear-gradient(-45deg, #183850 0, #183850 25%, #192C46 50%, #22254C 75%, #22254C 100%);
            background-repeat: no-repeat;
            background-attachment: fixed;
        }

        button {
            /*background: transparent;*/
            border: 0;
            /*color: white;*/
            text-transform: uppercase;
            border-radius: 3px;
            cursor: pointer;
        }

        .chat {
            display: flex;
            flex-direction: column;
            /*position: absolute;*/
            /*opacity: 0;*/
            /*width: 1px;*/
            /*height: 1px;*/
            /*border-radius: 50%;*/
            /*transition: all 250ms ease-out;*/
            margin: auto;
            /*top: 0;*/
            /*left: 0;*/
            /*right: 0;*/
            /*bottom: 0;*/
        }

        .chat.enter {
            opacity: 1;
            border-radius: 0;
            margin: 10px;
            width: auto;
            height: auto;
        }

        .chat .header {
            flex-shrink: 0;
            padding-bottom: 10px;
            display: flex;
            background: transparent;
        }

         .chat .header .title {
            flex-grow: 1;
            flex-shrink: 1;
            padding: 0 5px;
        }

         .chat .header button {
            flex-shrink: 0;
        }

         .chat .messages {
            padding: 10px;
            margin: 0;
            list-style: none;
            overflow-y: scroll;
            overflow-x: hidden;
            flex-grow: 1;
            border-radius: 4px;
            background: transparent;
        }

         .chat .messages::-webkit-scrollbar {
            width: 5px;
        }

         .chat .messages::-webkit-scrollbar-track {
            border-radius: 5px;
            background-color: rgba(25, 147, 147, 0.1);
        }

         .chat .messages::-webkit-scrollbar-thumb {
            border-radius: 5px;
            background-color: rgba(25, 147, 147, 0.2);
        }

         .chat .messages li {
            position: relative;
            clear: both;
            display: inline-block;
            padding: 14px;
            margin: 0 0 20px 0;
            font: 12px/16px "Noto Sans", sans-serif;
            border-radius: 10px;
            background-color: rgba(25, 147, 147, 0.2);
            word-wrap: break-word;
            max-width: 81%;
        }

         .chat .messages li:before {
            position: absolute;
            top: 0;
            width: 25px;
            height: 25px;
            border-radius: 25px;
            content: "";
            background-size: cover;
        }

         .chat .messages li:after {
            position: absolute;
            top: 10px;
            content: "";
            width: 0;
            height: 0;
            border-top: 10px solid rgba(25, 147, 147, 0.2);
        }

         .chat .messages li.other {
            animation: show-chat-odd 0.15s 1 ease-in;
            -moz-animation: show-chat-odd 0.15s 1 ease-in;
            -webkit-animation: show-chat-odd 0.15s 1 ease-in;
            float: right;
            margin-right: 45px;
            color: #0AD5C1;
        }

         .chat .messages li.other:before {
            right: -45px;
            background-image: url(https://github.com/Thatkookooguy.png);
        }

         .chat .messages li.other:after {
            border-right: 10px solid transparent;
            right: -10px;
        }

         .chat .messages li.self {
            animation: show-chat-even 0.15s 1 ease-in;
            -moz-animation: show-chat-even 0.15s 1 ease-in;
            -webkit-animation: show-chat-even 0.15s 1 ease-in;
            float: left;
            margin-left: 45px;
            color: #0EC879;
        }

         .chat .messages li.self:before {
            left: -45px;
            background-image: url(https://github.com/ortichon.png);
        }

         .chat .messages li.self:after {
            border-left: 10px solid transparent;
            left: -10px;
        }

         .chat .footer {
            flex-shrink: 0;
            display: flex;
            padding-top: 10px;
            max-height: 90px;
            background: transparent;
        }

         .chat .footer .text-box {
            border-radius: 3px;
            background: rgba(25, 147, 147, 0.2);
            min-height: 100%;
            width: 100%;
            margin-right: 5px;
            color: #0EC879;
            overflow-y: auto;
            padding: 2px 5px;
        }

         .chat .footer .text-box::-webkit-scrollbar {
            width: 5px;
        }

         .chat .footer .text-box::-webkit-scrollbar-track {
            border-radius: 5px;
            background-color: rgba(25, 147, 147, 0.1);
        }

         .chat .footer .text-box::-webkit-scrollbar-thumb {
            border-radius: 5px;
            background-color: rgba(25, 147, 147, 0.2);
        }

        @keyframes show-chat-even {
            0% {
                margin-left: -480px;
            }
            100% {
                margin-left: 0;
            }
        }

        @-moz-keyframes show-chat-even {
            0% {
                margin-left: -480px;
            }
            100% {
                margin-left: 0;
            }
        }

        @-webkit-keyframes show-chat-even {
            0% {
                margin-left: -480px;
            }
            100% {
                margin-left: 0;
            }
        }

        @keyframes show-chat-odd {
            0% {
                margin-right: -480px;
            }
            100% {
                margin-right: 0;
            }
        }

        @-moz-keyframes show-chat-odd {
            0% {
                margin-right: -480px;
            }
            100% {
                margin-right: 0;
            }
        }

        @-webkit-keyframes show-chat-odd {
            0% {
                margin-right: -480px;
            }
            100% {
                margin-right: 0;
            }
        }
        
            
    .chat
        .header
            span.title Talk To Us
            button
                i.fa.fa-times
        .flex-fill#chat(style="display:none")
            ul.messages
                li.other aasdad
                li.self kklkklk
            .footer
                div.text-box(contenteditable=true, disabled="true")
                button#sendMessage send    
        
        .flex-fill#contact
            input#name(name='name', type='text', placeholder='Your Name' required='')
            br
            input#email(name='email', type='email', placeholder='Your Email', required='')
            br
            input#message(name='message', type='text', placeholder='Your Message', required='')
            br
            br
            button#start Start
            
    
block scripts
    script(src="/socket.io/socket.io.js")
    script.
        var socket = io();
        var CONVERSATION = null;
        const PROPERTY = '#{property._id}';
        
        // 'chat message' is for the id of the socket and $('#new-area') is for the text area
        socket.on('chat message', function (msg) {
            console.log(msg);
            appendMessage(msg['body'],msg['owner']['refModel']==='Contact');
        });
        
        socket.on('start chat', function (msg) {
            // console.log(msg);
            CONVERSATION = msg['conversation'];
            localStorage.setItem('CONVERSATION_ID',CONVERSATION)
            appendMessage(msg['text'],true);
        });
        
        socket.on('init chat', function (msg) {
            console.log(msg);
            CONVERSATION = msg['conversation'];
            $('.messages').empty();            

            for (var i = 0; i < msg['messages'].length; i++) {
                var message = msg['messages'][i];
                appendMessage(message['body'],message['owner']['refModel']==='Contact')
            }
            $('#contact').hide();
            $('#chat').show();
        });
        
        // chat
    
        var element = $('.floating-chat');
        
        socket.on('connect', function () {
            if(localStorage.getItem('CONVERSATION_ID')) {
                socket.emit('init chat', {'conversation': localStorage.getItem('CONVERSATION_ID')});
            }
        });
              
        
        setTimeout(function () {
            // element.addClass('enter');
        }, 1000);
        
    
        element.click(openElement);
    
        function openElement() {
            var messages = element.find('.messages');
            var textInput = element.find('.text-box');
            element.find('>i').hide();
            element.addClass('expand');
            element.find('.chat').addClass('enter');
            var strLength = textInput.val().length * 2;
            textInput.keydown(onMetaAndEnter).prop("disabled", false).focus();
            element.off('click', openElement);
            element.find('.header button').click(closeElement);
            element.find('#sendMessage').click(sendNewMessage);
            messages.scrollTop(messages.prop("scrollHeight"));

            element.find('#start').click(startChat);


        }
    
        function closeElement() {
            element.find('.chat').removeClass('enter').hide();
            element.find('>i').show();
            element.removeClass('expand');
            element.find('.header button').off('click', closeElement);
            element.find('#sendMessage').off('click', sendNewMessage);
            element.find('.text-box').off('keydown', onMetaAndEnter).prop("disabled", true).blur();
            setTimeout(function () {
                element.find('.chat').removeClass('enter').show()
                element.click(openElement);
            }, 500);
        }
    
        function createUUID() {
            // http://www.ietf.org/rfc/rfc4122.txt
            var s = [];
            var hexDigits = "0123456789abcdef";
            for (var i = 0; i < 36; i++) {
                s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
            }
            s[14] = "4"; // bits 12-15 of the time_hi_and_version field to 0010
            s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01
            s[8] = s[13] = s[18] = s[23] = "-";
    
            var uuid = s.join("");
            return uuid;
        }
        
        
        function appendMessage(newMessage,mine){
            var messagesContainer = $('.messages');
            
            if(mine) {
                messagesContainer.append([
                    '<li class="other">',
                    newMessage,
                    '</li>'
                ].join(''));
            }else {
                messagesContainer.append([
                    '<li class="self ">',
                    newMessage,
                    '</li>'
                ].join(''));
            }


            messagesContainer.finish().animate({
                scrollTop: messagesContainer.prop("scrollHeight")
            }, 250);
        }
        
    
        function sendNewMessage() {
            var userInput = $('.text-box');
            var newMessage = userInput.html().replace(/\<div\>|\<br.*?\>/ig, '\n').replace(/\<\/div\>/g, '').trim().replace(/\n/g, '<br>');
    
            if (!newMessage) return;
            
            
            // todo conversation can never be null
            var message = {
                conversation:CONVERSATION,
                property: PROPERTY,
                text:newMessage
            }

            socket.emit('new message', message);

            // clean out old message
            userInput.html('');
            // focus on input
            userInput.focus();
            
           // appendMessage(message['text']);
        }
        function startChat() {
            
            var name = $('#name').val();
            var email = $('#email').val();
            var body = $('#message').val();
            
            // todo if (!name || !email|| !message) return;
            
            var message = {
                name:name,
                email:email,
                property:PROPERTY,
                // conversationId: myStorage.getItem('chatID'),
                text:body
            }
            socket.emit('start chat', message);
            
            $('#contact').hide();
            $('#chat').show();
            
            
        }
    
        function onMetaAndEnter(event) {
            if ((event.metaKey || event.ctrlKey) && event.keyCode === 13) {
                sendNewMessage();
            }
        }
        
