extends layout

block content
    link(rel='stylesheet', href='/stylesheets/chatbox.css')
    style(type='text/css').
        .flex-fill{
            flex-grow:1;
            width: auto;
            height: auto;
            display: flex;
            flex-direction: column;
        }
    br
    a(href="/") Home
    br
    
    .floating-chat
        i.fa.fa-comments
        .chat
            .header
                span.title Talk To Us
                button
                    i.fa.fa-times
            .flex-fill#chat(style="display:none")
                ul.messages
                    li.other aasdad
                    li.self kklkklk
                .footer
                    div.text-box(contenteditable=true, disabled="true")
                    button#sendMessage send    
            
            flex-fill#contact
                input#name(name='name', type='text', placeholder='Your Name' required='')
                br
                input#email(name='email', type='email', placeholder='Your Email', required='')
                br
                input#message(name='message', type='text', placeholder='Your Message', required='')
                br
                br
                button#start Start
            
    
block scripts
    script(src="/socket.io/socket.io.js")
    script.

        var socket = io('/help');
        const CONVERSATION = null;
        
        // 'chat message' is for the id of the socket and $('#new-area') is for the text area
        socket.on('chat message', function (msg) {
            console.log(msg);
            
            
            appendMessage(msg);
        });
        
        // chat
    
        var element = $('.floating-chat');
        var myStorage = localStorage;

        if (!myStorage.getItem('chatID')) {
            myStorage.setItem('chatID', createUUID());
        }
        /*
        socket.on('connect', function () {
            socket.emit('start chat', {'conversation': localStorage.getItem('CONVERSATION_ID')});

        });
        */      
        
        setTimeout(function () {
            element.addClass('enter');
        }, 1000);
    
        element.click(openElement);
    
        function openElement() {
            var messages = element.find('.messages');
            var textInput = element.find('.text-box');
            element.find('>i').hide();
            element.addClass('expand');
            element.find('.chat').addClass('enter');
            var strLength = textInput.val().length * 2;
            textInput.keydown(onMetaAndEnter).prop("disabled", false).focus();
            element.off('click', openElement);
            element.find('.header button').click(closeElement);
            element.find('#sendMessage').click(sendNewMessage);
            messages.scrollTop(messages.prop("scrollHeight"));

            element.find('#start').click(startChat);


        }
    
        function closeElement() {
            element.find('.chat').removeClass('enter').hide();
            element.find('>i').show();
            element.removeClass('expand');
            element.find('.header button').off('click', closeElement);
            element.find('#sendMessage').off('click', sendNewMessage);
            element.find('.text-box').off('keydown', onMetaAndEnter).prop("disabled", true).blur();
            setTimeout(function () {
                element.find('.chat').removeClass('enter').show()
                element.click(openElement);
            }, 500);
        }
    
        function createUUID() {
            // http://www.ietf.org/rfc/rfc4122.txt
            var s = [];
            var hexDigits = "0123456789abcdef";
            for (var i = 0; i < 36; i++) {
                s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
            }
            s[14] = "4"; // bits 12-15 of the time_hi_and_version field to 0010
            s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01
            s[8] = s[13] = s[18] = s[23] = "-";
    
            var uuid = s.join("");
            return uuid;
        }
        
        
        function appendMessage(newMessage,mine){
            var messagesContainer = $('.messages');
            
            if(mine) {
                messagesContainer.append([
                    '<li class="self">',
                    newMessage,
                    '</li>'
                ].join(''));
            }else {
                messagesContainer.append([
                    '<li class="other">',
                    newMessage,
                    '</li>'
                ].join(''));
            }


            messagesContainer.finish().animate({
                scrollTop: messagesContainer.prop("scrollHeight")
            }, 250);
        }
        
    
        function sendNewMessage() {
            var userInput = $('.text-box');
            var newMessage = userInput.html().replace(/\<div\>|\<br.*?\>/ig, '\n').replace(/\<\/div\>/g, '').trim().replace(/\n/g, '<br>');
    
            if (!newMessage) return;
            
            var message = {
                conversation:CONVERSATION,
                text:newMessage
            }

            socket.emit('new message', message);

            // clean out old message
            userInput.html('');
            // focus on input
            userInput.focus();
            
            appendMessage(message['text']);
        }
        function startChat() {
            
            var name = $('#name').val();
            var email = $('#email').val();
            var body = $('#message').val();
            
            // todo if (!name || !email|| !message) return;
            
            var message = {
                name:name,
                email:email,
                // conversationId: myStorage.getItem('chatID'),
                text:body
            }
            socket.emit('init chat', message);
            
            $('#contact').hide();
            $('#chat').show();
            
            
        }
    
        function onMetaAndEnter(event) {
            if ((event.metaKey || event.ctrlKey) && event.keyCode === 13) {
                sendNewMessage();
            }
        }
        
